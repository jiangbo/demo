const sg = @import("sokol").gfx;
const std = @import("std");
//
//    #version:1# (machine generated, don't edit!)
//
//    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
//
//    Cmdline:
//        sokol-shdc -i .\src\engine\shader\quad.glsl -o .\src\engine\shader\quad.glsl.zig -l glsl410:metal_macos:hlsl5:glsl300es:wgsl -f sokol_zig --reflection
//
//    Overview:
//    =========
//    Shader program: 'quad':
//        Get shader desc: shd.quadShaderDesc(sg.queryBackend());
//        Vertex Shader: vs
//        Fragment Shader: fs
//        Attributes:
//            ATTR_quad_vertex_position => 0
//            ATTR_quad_vertex_size => 1
//            ATTR_quad_vertex_texture => 2
//            ATTR_quad_vertex_color => 3
//    Bindings:
//        Uniform block 'vs_params':
//            Zig struct: VsParams
//            Bind slot: UB_vs_params => 0
//        Texture 'tex':
//            Image type: ._2D
//            Sample type: .FLOAT
//            Multisampled: false
//            Bind slot: VIEW_tex => 0
//        Sampler 'smp':
//            Type: .FILTERING
//            Bind slot: SMP_smp => 0
//
pub const ATTR_quad_vertex_position = 0;
pub const ATTR_quad_vertex_size = 1;
pub const ATTR_quad_vertex_texture = 2;
pub const ATTR_quad_vertex_color = 3;
pub const UB_vs_params = 0;
pub const VIEW_tex = 0;
pub const SMP_smp = 0;
pub const VsParams = extern struct {
    viewMatrix: [16]f32 align(16),
    textureVec: [4]f32 align(1),
};
//
//    #version 410
//
//    const vec2 _27[4] = vec2[](vec2(0.0), vec2(1.0, 0.0), vec2(0.0, 1.0), vec2(1.0));
//
//    uniform vec4 vs_params[5];
//    layout(location = 1) in vec2 vertex_size;
//    layout(location = 0) in vec4 vertex_position;
//    layout(location = 0) out vec4 color;
//    layout(location = 3) in vec4 vertex_color;
//    layout(location = 2) in vec4 vertex_texture;
//    layout(location = 1) out vec2 uv;
//
//    void main()
//    {
//        uint _15 = uint(gl_VertexID) % 4u;
//        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * (vec4(_27[_15] * vertex_size, 0.0, 0.0) + vertex_position);
//        color = vertex_color;
//        vec2 texcoord[4] = vec2[](vec2(vertex_texture.x, vertex_texture.y), vec2(vertex_texture.z, vertex_texture.y), vec2(vertex_texture.x, vertex_texture.w), vec2(vertex_texture.z, vertex_texture.w));
//        uv = texcoord[_15] * vs_params[4].xy;
//    }
//
//
const vs_source_glsl410 = [837]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x63,0x6f,
    0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,0x5b,0x34,0x5d,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,
    0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x73,0x69,0x7a,0x65,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,
    0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x31,0x35,0x20,0x3d,
    0x20,0x75,0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,
    0x44,0x29,0x20,0x25,0x20,0x34,0x75,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x28,0x76,0x65,0x63,0x34,0x28,
    0x5f,0x32,0x37,0x5b,0x5f,0x31,0x35,0x5d,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x73,0x69,0x7a,0x65,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x20,0x2b,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,
    0x64,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,
    0x63,0x32,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x2e,0x78,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x2e,0x79,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x7a,0x2c,0x20,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x79,0x29,
    0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2e,0x78,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x77,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,
    0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,
    0x7a,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x2e,0x77,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x5b,0x5f,0x31,0x35,0x5d,0x20,0x2a,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
//
//    #version 410
//
//    uniform sampler2D tex_smp;
//
//    layout(location = 0) out vec4 frag_color;
//    layout(location = 1) in vec2 uv;
//    layout(location = 0) in vec4 color;
//
//    void main()
//    {
//        frag_color = texture(tex_smp, uv) * color;
//    }
//
//
const fs_source_glsl410 = [219]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,0x29,0x20,0x2a,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
//
//    #version 300 es
//
//    const vec2 _27[4] = vec2[](vec2(0.0), vec2(1.0, 0.0), vec2(0.0, 1.0), vec2(1.0));
//
//    uniform vec4 vs_params[5];
//    layout(location = 1) in vec2 vertex_size;
//    layout(location = 0) in vec4 vertex_position;
//    out vec4 color;
//    layout(location = 3) in vec4 vertex_color;
//    layout(location = 2) in vec4 vertex_texture;
//    out vec2 uv;
//
//    void main()
//    {
//        uint _15 = uint(gl_VertexID) % 4u;
//        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * (vec4(_27[_15] * vertex_size, 0.0, 0.0) + vertex_position);
//        color = vertex_color;
//        vec2 texcoord[4] = vec2[](vec2(vertex_texture.x, vertex_texture.y), vec2(vertex_texture.z, vertex_texture.y), vec2(vertex_texture.x, vertex_texture.w), vec2(vertex_texture.z, vertex_texture.w));
//        uv = texcoord[_15] * vs_params[4].xy;
//    }
//
//
const vs_source_glsl300es = [798]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x63,0x6f,0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,0x5b,
    0x34,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,
    0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,
    0x29,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x5f,0x31,0x35,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x67,
    0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x29,0x20,0x25,0x20,0x34,0x75,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,
    0x20,0x2a,0x20,0x28,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x37,0x5b,0x5f,0x31,0x35,
    0x5d,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2b,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x5b,0x34,0x5d,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,0x28,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x78,0x2c,0x20,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x79,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x2e,0x7a,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x79,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x78,
    0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x2e,0x77,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x65,0x72,0x74,0x65,0x78,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x7a,0x2c,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x77,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,
    0x64,0x5b,0x5f,0x31,0x35,0x5d,0x20,0x2a,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
//
//    #version 300 es
//    precision mediump float;
//    precision highp int;
//
//    uniform highp sampler2D tex_smp;
//
//    layout(location = 0) out highp vec4 frag_color;
//    in highp vec2 uv;
//    in highp vec4 color;
//
//    void main()
//    {
//        frag_color = texture(tex_smp, uv) * color;
//    }
//
//
const fs_source_glsl300es = [250]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x75,
    0x76,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,0x29,0x20,0x2a,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
//
//    static const float2 _27[4] = { 0.0f.xx, float2(1.0f, 0.0f), float2(0.0f, 1.0f), 1.0f.xx };
//
//    cbuffer vs_params : register(b0)
//    {
//        row_major float4x4 _57_viewMatrix : packoffset(c0);
//        float4 _57_textureVec : packoffset(c4);
//    };
//
//
//    static float4 gl_Position;
//    static int gl_VertexIndex;
//    static float2 vertex_size;
//    static float4 vertex_position;
//    static float4 color;
//    static float4 vertex_color;
//    static float4 vertex_texture;
//    static float2 uv;
//
//    struct SPIRV_Cross_Input
//    {
//        float4 vertex_position : TEXCOORD0;
//        float2 vertex_size : TEXCOORD1;
//        float4 vertex_texture : TEXCOORD2;
//        float4 vertex_color : TEXCOORD3;
//        uint gl_VertexIndex : SV_VertexID;
//    };
//
//    struct SPIRV_Cross_Output
//    {
//        float4 color : TEXCOORD0;
//        float2 uv : TEXCOORD1;
//        float4 gl_Position : SV_Position;
//    };
//
//    void vert_main()
//    {
//        uint _15 = uint(gl_VertexIndex) % 4u;
//        gl_Position = mul(float4(_27[_15] * vertex_size, 0.0f, 0.0f) + vertex_position, _57_viewMatrix);
//        color = vertex_color;
//        float2 _94[4] = { float2(vertex_texture.x, vertex_texture.y), float2(vertex_texture.z, vertex_texture.y), float2(vertex_texture.x, vertex_texture.w), float2(vertex_texture.z, vertex_texture.w) };
//        float2 texcoord[4] = _94;
//        uv = texcoord[_15] * _57_textureVec.xy;
//    }
//
//    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
//    {
//        gl_VertexIndex = int(stage_input.gl_VertexIndex);
//        vertex_size = stage_input.vertex_size;
//        vertex_position = stage_input.vertex_position;
//        vertex_color = stage_input.vertex_color;
//        vertex_texture = stage_input.vertex_texture;
//        vert_main();
//        SPIRV_Cross_Output stage_output;
//        stage_output.gl_Position = gl_Position;
//        stage_output.color = color;
//        stage_output.uv = uv;
//        return stage_output;
//    }
//
const vs_source_hlsl5 = [1739]u8 {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x5f,0x32,0x37,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x7b,0x20,0x30,
    0x2e,0x30,0x66,0x2e,0x78,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x31,
    0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,
    0x31,0x2e,0x30,0x66,0x2e,0x78,0x78,0x20,0x7d,0x3b,0x0a,0x0a,0x63,0x62,0x75,0x66,
    0x66,0x65,0x72,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,
    0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x35,0x37,0x5f,0x76,0x69,0x65,0x77,0x4d,0x61,
    0x74,0x72,0x69,0x78,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x5f,0x35,0x37,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x56,0x65,0x63,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x34,
    0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x74,0x20,0x67,0x6c,
    0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x73,
    0x69,0x7a,0x65,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,
    0x6e,0x64,0x65,0x78,0x20,0x3a,0x20,0x53,0x56,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,
    0x49,0x44,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,
    0x6e,0x74,0x20,0x5f,0x31,0x35,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x67,0x6c,
    0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x29,0x20,0x25,0x20,
    0x34,0x75,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x5f,0x32,0x37,0x5b,0x5f,0x31,0x35,0x5d,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,
    0x2e,0x30,0x66,0x29,0x20,0x2b,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x5f,0x35,0x37,0x5f,0x76,0x69,0x65,0x77,
    0x4d,0x61,0x74,0x72,0x69,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x39,
    0x34,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x7b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x78,
    0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x2e,0x79,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x7a,0x2c,0x20,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x79,0x29,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x78,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x77,0x29,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x2e,0x7a,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x2e,0x77,0x29,0x20,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x5b,0x34,
    0x5d,0x20,0x3d,0x20,0x5f,0x39,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x5b,0x5f,0x31,0x35,0x5d,0x20,
    0x2a,0x20,0x5f,0x35,0x37,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x56,0x65,0x63,
    0x2e,0x78,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,
    0x64,0x65,0x78,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,
    0x6e,0x64,0x65,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x2e,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
//
//    Texture2D<float4> tex : register(t0);
//    SamplerState smp : register(s0);
//
//    static float4 frag_color;
//    static float2 uv;
//    static float4 color;
//
//    struct SPIRV_Cross_Input
//    {
//        float4 color : TEXCOORD0;
//        float2 uv : TEXCOORD1;
//    };
//
//    struct SPIRV_Cross_Output
//    {
//        float4 frag_color : SV_Target0;
//    };
//
//    void frag_main()
//    {
//        frag_color = tex.Sample(smp, uv) * color;
//    }
//
//    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
//    {
//        uv = stage_input.uv;
//        color = stage_input.color;
//        frag_main();
//        SPIRV_Cross_Output stage_output;
//        stage_output.frag_color = frag_color;
//        return stage_output;
//    }
//
const fs_source_hlsl5 = [599]u8 {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x74,0x65,0x78,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,
    0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,
    0x74,0x65,0x20,0x73,0x6d,0x70,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x75,0x76,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,0x29,0x20,0x2a,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,
    0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
//
//    #pragma clang diagnostic ignored "-Wmissing-prototypes"
//    #pragma clang diagnostic ignored "-Wmissing-braces"
//
//    #include <metal_stdlib>
//    #include <simd/simd.h>
//
//    using namespace metal;
//
//    template<typename T, size_t Num>
//    struct spvUnsafeArray
//    {
//        T elements[Num ? Num : 1];
//
//        thread T& operator [] (size_t pos) thread
//        {
//            return elements[pos];
//        }
//        constexpr const thread T& operator [] (size_t pos) const thread
//        {
//            return elements[pos];
//        }
//
//        device T& operator [] (size_t pos) device
//        {
//            return elements[pos];
//        }
//        constexpr const device T& operator [] (size_t pos) const device
//        {
//            return elements[pos];
//        }
//
//        constexpr const constant T& operator [] (size_t pos) const constant
//        {
//            return elements[pos];
//        }
//
//        threadgroup T& operator [] (size_t pos) threadgroup
//        {
//            return elements[pos];
//        }
//        constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
//        {
//            return elements[pos];
//        }
//    };
//
//    struct vs_params
//    {
//        float4x4 viewMatrix;
//        float4 textureVec;
//    };
//
//    constant spvUnsafeArray<float2, 4> _27 = spvUnsafeArray<float2, 4>({ float2(0.0), float2(1.0, 0.0), float2(0.0, 1.0), float2(1.0) });
//
//    struct main0_out
//    {
//        float4 color [[user(locn0)]];
//        float2 uv [[user(locn1)]];
//        float4 gl_Position [[position]];
//    };
//
//    struct main0_in
//    {
//        float4 vertex_position [[attribute(0)]];
//        float2 vertex_size [[attribute(1)]];
//        float4 vertex_texture [[attribute(2)]];
//        float4 vertex_color [[attribute(3)]];
//    };
//
//    vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _57 [[buffer(0)]], uint gl_VertexIndex [[vertex_id]])
//    {
//        main0_out out = {};
//        uint _15 = uint(int(gl_VertexIndex)) % 4u;
//        out.gl_Position = _57.viewMatrix * (float4(_27[_15] * in.vertex_size, 0.0, 0.0) + in.vertex_position);
//        out.color = in.vertex_color;
//        spvUnsafeArray<float2, 4> _94 = spvUnsafeArray<float2, 4>({ float2(in.vertex_texture.x, in.vertex_texture.y), float2(in.vertex_texture.z, in.vertex_texture.y), float2(in.vertex_texture.x, in.vertex_texture.w), float2(in.vertex_texture.z, in.vertex_texture.w) });
//        spvUnsafeArray<float2, 4> texcoord = _94;
//        out.uv = texcoord[_15] * _57.textureVec.xy;
//        return out;
//    }
//
//
const vs_source_metal_macos = [2263]u8 {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,
    0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,
    0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,
    0x69,0x6e,0x67,0x2d,0x62,0x72,0x61,0x63,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,
    0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,
    0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,
    0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,
    0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,
    0x61,0x6c,0x3b,0x0a,0x0a,0x74,0x65,0x6d,0x70,0x6c,0x61,0x74,0x65,0x3c,0x74,0x79,
    0x70,0x65,0x6e,0x61,0x6d,0x65,0x20,0x54,0x2c,0x20,0x73,0x69,0x7a,0x65,0x5f,0x74,
    0x20,0x4e,0x75,0x6d,0x3e,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,0x70,0x76,
    0x55,0x6e,0x73,0x61,0x66,0x65,0x41,0x72,0x72,0x61,0x79,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x54,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x73,0x5b,0x4e,0x75,0x6d,
    0x20,0x3f,0x20,0x4e,0x75,0x6d,0x20,0x3a,0x20,0x31,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x0a,0x20,0x20,0x20,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x54,0x26,0x20,
    0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x20,0x5b,0x5d,0x20,0x28,0x73,0x69,0x7a,
    0x65,0x5f,0x74,0x20,0x70,0x6f,0x73,0x29,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x73,0x5b,0x70,0x6f,
    0x73,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6e,0x73,0x74,0x65,0x78,0x70,0x72,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x54,0x26,0x20,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,
    0x20,0x5b,0x5d,0x20,0x28,0x73,0x69,0x7a,0x65,0x5f,0x74,0x20,0x70,0x6f,0x73,0x29,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x73,0x5b,0x70,0x6f,0x73,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,
    0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x54,0x26,0x20,0x6f,0x70,0x65,0x72,0x61,
    0x74,0x6f,0x72,0x20,0x5b,0x5d,0x20,0x28,0x73,0x69,0x7a,0x65,0x5f,0x74,0x20,0x70,
    0x6f,0x73,0x29,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x73,0x5b,0x70,0x6f,0x73,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x73,0x74,0x65,0x78,
    0x70,0x72,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,
    0x54,0x26,0x20,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x20,0x5b,0x5d,0x20,0x28,
    0x73,0x69,0x7a,0x65,0x5f,0x74,0x20,0x70,0x6f,0x73,0x29,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x65,0x6c,
    0x65,0x6d,0x65,0x6e,0x74,0x73,0x5b,0x70,0x6f,0x73,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x65,0x78,0x70,0x72,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x61,0x6e,0x74,0x20,0x54,0x26,0x20,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,
    0x20,0x5b,0x5d,0x20,0x28,0x73,0x69,0x7a,0x65,0x5f,0x74,0x20,0x70,0x6f,0x73,0x29,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x73,0x5b,0x70,0x6f,
    0x73,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x0a,0x20,
    0x20,0x20,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x67,0x72,0x6f,0x75,0x70,0x20,0x54,
    0x26,0x20,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x20,0x5b,0x5d,0x20,0x28,0x73,
    0x69,0x7a,0x65,0x5f,0x74,0x20,0x70,0x6f,0x73,0x29,0x20,0x74,0x68,0x72,0x65,0x61,
    0x64,0x67,0x72,0x6f,0x75,0x70,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x65,0x6c,0x65,0x6d,
    0x65,0x6e,0x74,0x73,0x5b,0x70,0x6f,0x73,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x73,0x74,0x65,0x78,0x70,0x72,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x67,0x72,0x6f,0x75,0x70,
    0x20,0x54,0x26,0x20,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x20,0x5b,0x5d,0x20,
    0x28,0x73,0x69,0x7a,0x65,0x5f,0x74,0x20,0x70,0x6f,0x73,0x29,0x20,0x63,0x6f,0x6e,
    0x73,0x74,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x67,0x72,0x6f,0x75,0x70,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x65,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x73,0x5b,0x70,0x6f,0x73,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x76,0x69,0x65,
    0x77,0x4d,0x61,0x74,0x72,0x69,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x56,0x65,0x63,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x73,0x70,0x76,
    0x55,0x6e,0x73,0x61,0x66,0x65,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x2c,0x20,0x34,0x3e,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x73,0x70,0x76,
    0x55,0x6e,0x73,0x61,0x66,0x65,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x2c,0x20,0x34,0x3e,0x28,0x7b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,
    0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x31,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x31,0x2e,0x30,0x29,0x20,0x7d,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,
    0x35,0x37,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,
    0x2c,0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,
    0x49,0x6e,0x64,0x65,0x78,0x20,0x5b,0x5b,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,
    0x64,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x31,0x35,0x20,0x3d,0x20,0x75,0x69,
    0x6e,0x74,0x28,0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,
    0x49,0x6e,0x64,0x65,0x78,0x29,0x29,0x20,0x25,0x20,0x34,0x75,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x5f,0x35,0x37,0x2e,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,
    0x69,0x78,0x20,0x2a,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x32,0x37,
    0x5b,0x5f,0x31,0x35,0x5d,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x73,0x69,0x7a,0x65,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x20,0x2b,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x70,
    0x76,0x55,0x6e,0x73,0x61,0x66,0x65,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x2c,0x20,0x34,0x3e,0x20,0x5f,0x39,0x34,0x20,0x3d,0x20,0x73,0x70,
    0x76,0x55,0x6e,0x73,0x61,0x66,0x65,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x2c,0x20,0x34,0x3e,0x28,0x7b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x2e,0x78,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x79,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x2e,0x7a,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x79,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x78,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x77,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x7a,0x2c,0x20,0x69,0x6e,0x2e,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x77,0x29,
    0x20,0x7d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x70,0x76,0x55,0x6e,0x73,0x61,
    0x66,0x65,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x32,0x2c,0x20,
    0x34,0x3e,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x5f,0x39,
    0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x75,0x76,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x5b,0x5f,0x31,0x35,0x5d,0x20,0x2a,0x20,
    0x5f,0x35,0x37,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x56,0x65,0x63,0x2e,0x78,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,
    0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
//
//    #include <metal_stdlib>
//    #include <simd/simd.h>
//
//    using namespace metal;
//
//    struct main0_out
//    {
//        float4 frag_color [[color(0)]];
//    };
//
//    struct main0_in
//    {
//        float4 color [[user(locn0)]];
//        float2 uv [[user(locn1)]];
//    };
//
//    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(0)]])
//    {
//        main0_out out = {};
//        out.frag_color = tex.sample(smp, in.uv) * in.color;
//        return out;
//    }
//
//
const fs_source_metal_macos = [436]u8 {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,
    0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,
    0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,
    0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,
    0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,0x65,
    0x78,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,
    0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,0x20,0x5b,0x5b,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,
    0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,
    0x75,0x76,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
//
//    diagnostic(off, derivative_uniformity);
//
//    struct vs_params {
//      /_ @offset(0) _/
//      viewMatrix : mat4x4f,
//      /_ @offset(64) _/
//      textureVec : vec4f,
//    }
//
//    var<private> gl_VertexIndex : i32;
//
//    var<private> vertex_size : vec2f;
//
//    var<private> vertex_position : vec4f;
//
//    @binding(0) @group(0) var<uniform> x_57 : vs_params;
//
//    var<private> color : vec4f;
//
//    var<private> vertex_color : vec4f;
//
//    var<private> vertex_texture : vec4f;
//
//    var<private> uv : vec2f;
//
//    var<private> gl_Position : vec4f;
//
//    fn main_1() {
//      var vertexIndex : u32;
//      var position_1 : vec2f;
//      var indexable : array<vec2f, 4u>;
//      var depthPosition : vec4f;
//      var texcoord : array<vec2f, 4u>;
//      vertexIndex = (bitcast<u32>(gl_VertexIndex) % 4u);
//      let x_28 = vertexIndex;
//      indexable = array<vec2f, 4u>(vec2f(), vec2f(1.0f, 0.0f), vec2f(0.0f, 1.0f), vec2f(1.0f));
//      position_1 = (indexable[x_28] * vertex_size);
//      depthPosition = (vec4f(position_1.x, position_1.y, 0.0f, 0.0f) + vertex_position);
//      gl_Position = (x_57.viewMatrix * depthPosition);
//      color = vertex_color;
//      texcoord = array<vec2f, 4u>(vec2f(vertex_texture.x, vertex_texture.y), vec2f(vertex_texture.z, vertex_texture.y), vec2f(vertex_texture.x, vertex_texture.w), vec2f(vertex_texture.z, vertex_texture.w));
//      uv = (texcoord[vertexIndex] * x_57.textureVec.xy);
//      return;
//    }
//
//    struct main_out {
//      @builtin(position)
//      gl_Position : vec4f,
//      @location(0)
//      color_1 : vec4f,
//      @location(1)
//      uv_1 : vec2f,
//    }
//
//    @vertex
//    fn main(@builtin(vertex_index) gl_VertexIndex_param : u32, @location(1) vertex_size_param : vec2f, @location(0) vertex_position_param : vec4f, @location(3) vertex_color_param : vec4f, @location(2) vertex_texture_param : vec4f) -> main_out {
//      gl_VertexIndex = bitcast<i32>(gl_VertexIndex_param);
//      vertex_size = vertex_size_param;
//      vertex_position = vertex_position_param;
//      vertex_color = vertex_color_param;
//      vertex_texture = vertex_texture_param;
//      main_1();
//      return main_out(gl_Position, color, uv);
//    }
//
const vs_source_wgsl = [1937]u8 {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x7b,0x0a,0x20,0x20,0x2f,0x2a,
    0x20,0x40,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x30,0x29,0x20,0x2a,0x2f,0x0a,0x20,
    0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,0x69,0x78,0x20,0x3a,0x20,0x6d,0x61,
    0x74,0x34,0x78,0x34,0x66,0x2c,0x0a,0x20,0x20,0x2f,0x2a,0x20,0x40,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x36,0x34,0x29,0x20,0x2a,0x2f,0x0a,0x20,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x56,0x65,0x63,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,
    0x0a,0x7d,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,
    0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x20,
    0x3a,0x20,0x69,0x33,0x32,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,
    0x61,0x74,0x65,0x3e,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,
    0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,
    0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,
    0x0a,0x0a,0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x28,0x30,0x29,0x20,0x40,0x67,
    0x72,0x6f,0x75,0x70,0x28,0x30,0x29,0x20,0x76,0x61,0x72,0x3c,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x3e,0x20,0x78,0x5f,0x35,0x37,0x20,0x3a,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,
    0x61,0x74,0x65,0x3e,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x34,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,
    0x3e,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,
    0x76,0x61,0x74,0x65,0x3e,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x76,
    0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x75,0x76,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,
    0x76,0x61,0x74,0x65,0x3e,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x66,0x6e,0x20,0x6d,
    0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x20,0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,
    0x76,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x20,0x3a,0x20,0x75,0x33,
    0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,
    0x61,0x72,0x20,0x69,0x6e,0x64,0x65,0x78,0x61,0x62,0x6c,0x65,0x20,0x3a,0x20,0x61,
    0x72,0x72,0x61,0x79,0x3c,0x76,0x65,0x63,0x32,0x66,0x2c,0x20,0x34,0x75,0x3e,0x3b,
    0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x64,0x65,0x70,0x74,0x68,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x20,0x20,
    0x76,0x61,0x72,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x61,
    0x72,0x72,0x61,0x79,0x3c,0x76,0x65,0x63,0x32,0x66,0x2c,0x20,0x34,0x75,0x3e,0x3b,
    0x0a,0x20,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x20,0x3d,
    0x20,0x28,0x62,0x69,0x74,0x63,0x61,0x73,0x74,0x3c,0x75,0x33,0x32,0x3e,0x28,0x67,
    0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x29,0x20,0x25,
    0x20,0x34,0x75,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x38,
    0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x3b,0x0a,
    0x20,0x20,0x69,0x6e,0x64,0x65,0x78,0x61,0x62,0x6c,0x65,0x20,0x3d,0x20,0x61,0x72,
    0x72,0x61,0x79,0x3c,0x76,0x65,0x63,0x32,0x66,0x2c,0x20,0x34,0x75,0x3e,0x28,0x76,
    0x65,0x63,0x32,0x66,0x28,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x31,0x2e,
    0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,
    0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x32,0x66,0x28,0x31,0x2e,0x30,0x66,0x29,0x29,0x3b,0x0a,0x20,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x31,0x20,0x3d,0x20,0x28,0x69,0x6e,0x64,0x65,
    0x78,0x61,0x62,0x6c,0x65,0x5b,0x78,0x5f,0x32,0x38,0x5d,0x20,0x2a,0x20,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,0x29,0x3b,0x0a,0x20,0x20,0x64,0x65,
    0x70,0x74,0x68,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x76,
    0x65,0x63,0x34,0x66,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x31,0x2e,
    0x78,0x2c,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x31,0x2e,0x79,0x2c,
    0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x20,0x2b,0x20,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x3b,
    0x0a,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x28,0x78,0x5f,0x35,0x37,0x2e,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,0x69,
    0x78,0x20,0x2a,0x20,0x64,0x65,0x70,0x74,0x68,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x29,0x3b,0x0a,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,0x72,0x72,0x61,0x79,0x3c,0x76,
    0x65,0x63,0x32,0x66,0x2c,0x20,0x34,0x75,0x3e,0x28,0x76,0x65,0x63,0x32,0x66,0x28,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x78,
    0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x2e,0x79,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x7a,0x2c,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x79,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x32,0x66,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x2e,0x78,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x77,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,
    0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,
    0x7a,0x2c,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x2e,0x77,0x29,0x29,0x3b,0x0a,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x28,0x74,
    0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x5b,0x76,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,
    0x64,0x65,0x78,0x5d,0x20,0x2a,0x20,0x78,0x5f,0x35,0x37,0x2e,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x56,0x65,0x63,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x40,0x62,0x75,
    0x69,0x6c,0x74,0x69,0x6e,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x0a,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x28,0x30,0x29,0x0a,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,
    0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x0a,0x20,0x20,0x75,0x76,0x5f,0x31,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x76,0x65,0x72,0x74,
    0x65,0x78,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x28,0x40,0x62,0x75,0x69,0x6c,
    0x74,0x69,0x6e,0x28,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,
    0x29,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x75,0x33,0x32,0x2c,0x20,0x40,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,
    0x65,0x63,0x32,0x66,0x2c,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,
    0x30,0x29,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,
    0x2c,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x33,0x29,0x20,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x20,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x32,0x29,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,
    0x65,0x63,0x34,0x66,0x29,0x20,0x2d,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,
    0x74,0x20,0x7b,0x0a,0x20,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,
    0x6e,0x64,0x65,0x78,0x20,0x3d,0x20,0x62,0x69,0x74,0x63,0x61,0x73,0x74,0x3c,0x69,
    0x33,0x32,0x3e,0x28,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,
    0x65,0x78,0x5f,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x3d,
    0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x61,0x69,0x6e,
    0x5f,0x6f,0x75,0x74,0x28,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x7d,0x0a,
    0x00,
};
//
//    diagnostic(off, derivative_uniformity);
//
//    var<private> frag_color : vec4f;
//
//    @binding(64) @group(1) var tex : texture_2d<f32>;
//
//    @binding(65) @group(1) var smp : sampler;
//
//    var<private> uv : vec2f;
//
//    var<private> color : vec4f;
//
//    fn main_1() {
//      let x_23 = uv;
//      let x_24 = textureSample(tex, smp, x_23);
//      frag_color = (x_24 * color);
//      return;
//    }
//
//    struct main_out {
//      @location(0)
//      frag_color_1 : vec4f,
//    }
//
//    @fragment
//    fn main(@location(1) uv_param : vec2f, @location(0) color_param : vec4f) -> main_out {
//      uv = uv_param;
//      color = color_param;
//      main_1();
//      return main_out(frag_color);
//    }
//
const fs_source_wgsl = [586]u8 {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,
    0x76,0x61,0x74,0x65,0x3e,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x40,0x62,0x69,0x6e,0x64,
    0x69,0x6e,0x67,0x28,0x36,0x34,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x31,
    0x29,0x20,0x76,0x61,0x72,0x20,0x74,0x65,0x78,0x20,0x3a,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x32,0x64,0x3c,0x66,0x33,0x32,0x3e,0x3b,0x0a,0x0a,0x40,0x62,
    0x69,0x6e,0x64,0x69,0x6e,0x67,0x28,0x36,0x35,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,
    0x70,0x28,0x31,0x29,0x20,0x76,0x61,0x72,0x20,0x73,0x6d,0x70,0x20,0x3a,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,
    0x76,0x61,0x74,0x65,0x3e,0x20,0x75,0x76,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,
    0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,
    0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x20,0x7b,0x0a,0x20,0x20,
    0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x33,0x20,0x3d,0x20,0x75,0x76,0x3b,0x0a,0x20,
    0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x34,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x73,
    0x6d,0x70,0x2c,0x20,0x78,0x5f,0x32,0x33,0x29,0x3b,0x0a,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x78,0x5f,0x32,0x34,0x20,
    0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x0a,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,
    0x7d,0x0a,0x0a,0x40,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x0a,0x66,0x6e,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x31,
    0x29,0x20,0x75,0x76,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x32,0x66,0x2c,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,
    0x65,0x63,0x34,0x66,0x29,0x20,0x2d,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,
    0x74,0x20,0x7b,0x0a,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x5f,0x31,0x28,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x28,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x29,0x3b,0x0a,0x7d,0x0a,0x00,
};
pub fn quadShaderDesc(backend: sg.Backend) sg.ShaderDesc {
    var desc: sg.ShaderDesc = .{};
    desc.label = "quad_shader";
    switch (backend) {
        .GLCORE => {
            desc.vertex_func.source = &vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = &fs_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = .FLOAT;
            desc.attrs[0].glsl_name = "vertex_position";
            desc.attrs[1].base_type = .FLOAT;
            desc.attrs[1].glsl_name = "vertex_size";
            desc.attrs[2].base_type = .FLOAT;
            desc.attrs[2].glsl_name = "vertex_texture";
            desc.attrs[3].base_type = .FLOAT;
            desc.attrs[3].glsl_name = "vertex_color";
            desc.uniform_blocks[0].stage = .VERTEX;
            desc.uniform_blocks[0].layout = .STD140;
            desc.uniform_blocks[0].size = 80;
            desc.uniform_blocks[0].glsl_uniforms[0].type = .FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 5;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "vs_params";
            desc.views[0].texture.stage = .FRAGMENT;
            desc.views[0].texture.image_type = ._2D;
            desc.views[0].texture.sample_type = .FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.samplers[0].stage = .FRAGMENT;
            desc.samplers[0].sampler_type = .FILTERING;
            desc.texture_sampler_pairs[0].stage = .FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = "tex_smp";
        },
        .GLES3 => {
            desc.vertex_func.source = &vs_source_glsl300es;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = &fs_source_glsl300es;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = .FLOAT;
            desc.attrs[0].glsl_name = "vertex_position";
            desc.attrs[1].base_type = .FLOAT;
            desc.attrs[1].glsl_name = "vertex_size";
            desc.attrs[2].base_type = .FLOAT;
            desc.attrs[2].glsl_name = "vertex_texture";
            desc.attrs[3].base_type = .FLOAT;
            desc.attrs[3].glsl_name = "vertex_color";
            desc.uniform_blocks[0].stage = .VERTEX;
            desc.uniform_blocks[0].layout = .STD140;
            desc.uniform_blocks[0].size = 80;
            desc.uniform_blocks[0].glsl_uniforms[0].type = .FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 5;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "vs_params";
            desc.views[0].texture.stage = .FRAGMENT;
            desc.views[0].texture.image_type = ._2D;
            desc.views[0].texture.sample_type = .FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.samplers[0].stage = .FRAGMENT;
            desc.samplers[0].sampler_type = .FILTERING;
            desc.texture_sampler_pairs[0].stage = .FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = "tex_smp";
        },
        .D3D11 => {
            desc.vertex_func.source = &vs_source_hlsl5;
            desc.vertex_func.d3d11_target = "vs_5_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = &fs_source_hlsl5;
            desc.fragment_func.d3d11_target = "ps_5_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = .FLOAT;
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].base_type = .FLOAT;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.attrs[2].base_type = .FLOAT;
            desc.attrs[2].hlsl_sem_name = "TEXCOORD";
            desc.attrs[2].hlsl_sem_index = 2;
            desc.attrs[3].base_type = .FLOAT;
            desc.attrs[3].hlsl_sem_name = "TEXCOORD";
            desc.attrs[3].hlsl_sem_index = 3;
            desc.uniform_blocks[0].stage = .VERTEX;
            desc.uniform_blocks[0].layout = .STD140;
            desc.uniform_blocks[0].size = 80;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.views[0].texture.stage = .FRAGMENT;
            desc.views[0].texture.image_type = ._2D;
            desc.views[0].texture.sample_type = .FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.hlsl_register_t_n = 0;
            desc.samplers[0].stage = .FRAGMENT;
            desc.samplers[0].sampler_type = .FILTERING;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.texture_sampler_pairs[0].stage = .FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
        },
        .METAL_MACOS => {
            desc.vertex_func.source = &vs_source_metal_macos;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = &fs_source_metal_macos;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = .FLOAT;
            desc.attrs[1].base_type = .FLOAT;
            desc.attrs[2].base_type = .FLOAT;
            desc.attrs[3].base_type = .FLOAT;
            desc.uniform_blocks[0].stage = .VERTEX;
            desc.uniform_blocks[0].layout = .STD140;
            desc.uniform_blocks[0].size = 80;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[0].texture.stage = .FRAGMENT;
            desc.views[0].texture.image_type = ._2D;
            desc.views[0].texture.sample_type = .FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.msl_texture_n = 0;
            desc.samplers[0].stage = .FRAGMENT;
            desc.samplers[0].sampler_type = .FILTERING;
            desc.samplers[0].msl_sampler_n = 0;
            desc.texture_sampler_pairs[0].stage = .FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
        },
        .WGPU => {
            desc.vertex_func.source = &vs_source_wgsl;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = &fs_source_wgsl;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = .FLOAT;
            desc.attrs[1].base_type = .FLOAT;
            desc.attrs[2].base_type = .FLOAT;
            desc.attrs[3].base_type = .FLOAT;
            desc.uniform_blocks[0].stage = .VERTEX;
            desc.uniform_blocks[0].layout = .STD140;
            desc.uniform_blocks[0].size = 80;
            desc.uniform_blocks[0].wgsl_group0_binding_n = 0;
            desc.views[0].texture.stage = .FRAGMENT;
            desc.views[0].texture.image_type = ._2D;
            desc.views[0].texture.sample_type = .FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.wgsl_group1_binding_n = 64;
            desc.samplers[0].stage = .FRAGMENT;
            desc.samplers[0].sampler_type = .FILTERING;
            desc.samplers[0].wgsl_group1_binding_n = 65;
            desc.texture_sampler_pairs[0].stage = .FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
        },
        else => {},
    }
    return desc;
}
pub fn quadAttrSlot(attr_name: []const u8) ?usize {
    if (std.mem.eql(u8, attr_name, "vertex_position")) {
        return 0;
    }
    if (std.mem.eql(u8, attr_name, "vertex_size")) {
        return 1;
    }
    if (std.mem.eql(u8, attr_name, "vertex_texture")) {
        return 2;
    }
    if (std.mem.eql(u8, attr_name, "vertex_color")) {
        return 3;
    }
    return null;
}
pub fn quadTextureSlot(tex_name: []const u8) ?usize {
    if (std.mem.eql(u8, tex_name, "tex")) {
        return 0;
    }
    return null;
}
pub fn quadSamplerSlot(smp_name: []const u8) ?usize {
    if (std.mem.eql(u8, smp_name, "smp")) {
        return 0;
    }
    return null;
}
pub fn quadUniformBlockSlot(ub_name: []const u8) ?usize {
    if (std.mem.eql(u8, ub_name, "vs_params")) {
        return 0;
    }
    return null;
}
pub fn quadUniformBlockSize(ub_name: []const u8) ?usize {
    if (std.mem.eql(u8, ub_name, "vs_params")) {
        return @sizeOf(VsParams);
    }
    return null;
}
pub fn quadUniformOffset(ub_name: []const u8, u_name: []const u8) ?usize {
    if (std.mem.eql(u8, ub_name, "vs_params")) {
        if (std.mem.eql(u8, u_name, "viewMatrix")) {
            return 0;
        }
        if (std.mem.eql(u8, u_name, "textureVec")) {
            return 64;
        }
    }
    return null;
}
pub fn quadUniformDesc(ub_name: []const u8, u_name: []const u8) ?sg.GlslShaderUniform {
    if (std.mem.eql(u8, ub_name, "vs_params")) {
        if (std.mem.eql(u8, u_name, "viewMatrix")) {
            var desc: sg.GlslShaderUniform = .{};
            desc.type = .MAT4;
            desc.array_count = 0;
            desc.glsl_name = "viewMatrix";
            return desc;
        }
        if (std.mem.eql(u8, u_name, "textureVec")) {
            var desc: sg.GlslShaderUniform = .{};
            desc.type = .FLOAT4;
            desc.array_count = 0;
            desc.glsl_name = "textureVec";
            return desc;
        }
    }
    return null;
}
pub fn quadStorageBufferSlot(sbuf_name: []const u8) ?usize {
    _ = sbuf_name;
    return null;
}
pub fn quadStorageImageSlot(simg_name: []const u8) ?usize {
    _ = simg_name;
    return null;
}
